{
  "version": 3,
  "sources": ["../../node_modules/@tanstack/table-core/src/utils.ts", "../../node_modules/@tanstack/table-core/src/core/column.ts", "../../node_modules/@tanstack/table-core/src/core/headers.ts", "../../node_modules/@tanstack/table-core/src/features/ColumnSizing.ts", "../../node_modules/@tanstack/table-core/src/features/Expanding.ts", "../../node_modules/@tanstack/table-core/src/filterFns.ts", "../../node_modules/@tanstack/table-core/src/features/Filters.ts", "../../node_modules/@tanstack/table-core/src/aggregationFns.ts", "../../node_modules/@tanstack/table-core/src/features/Grouping.ts", "../../node_modules/@tanstack/table-core/src/features/Ordering.ts", "../../node_modules/@tanstack/table-core/src/features/Pagination.ts", "../../node_modules/@tanstack/table-core/src/features/Pinning.ts", "../../node_modules/@tanstack/table-core/src/features/RowSelection.ts", "../../node_modules/@tanstack/table-core/src/sortingFns.ts", "../../node_modules/@tanstack/table-core/src/features/Sorting.ts", "../../node_modules/@tanstack/table-core/src/features/Visibility.ts", "../../node_modules/@tanstack/table-core/src/core/table.ts", "../../node_modules/@tanstack/table-core/src/core/cell.ts", "../../node_modules/@tanstack/table-core/src/core/row.ts", "../../node_modules/@tanstack/table-core/src/columnHelper.ts", "../../node_modules/@tanstack/table-core/src/utils/getCoreRowModel.ts", "../../node_modules/@tanstack/table-core/src/utils/filterRowsUtils.ts", "../../node_modules/@tanstack/table-core/src/utils/getFilteredRowModel.ts", "../../node_modules/@tanstack/table-core/src/utils/getFacetedRowModel.ts", "../../node_modules/@tanstack/table-core/src/utils/getFacetedUniqueValues.ts", "../../node_modules/@tanstack/table-core/src/utils/getFacetedMinMaxValues.ts", "../../node_modules/@tanstack/table-core/src/utils/getSortedRowModel.ts", "../../node_modules/@tanstack/table-core/src/utils/getGroupedRowModel.ts", "../../node_modules/@tanstack/table-core/src/utils/getExpandedRowModel.ts", "../../node_modules/@tanstack/table-core/src/utils/getPaginationRowModel.ts", "../../node_modules/@tanstack/react-table/src/index.tsx"],
  "sourcesContent": ["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T, TDepth extends any[] = []> = TDepth['length'] extends 5\n  ? never\n  : unknown extends T\n  ? string\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>, TDepth>\n  : T extends any[]\n  ? DeepKeys<T[number], [...TDepth, any]>\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T, TDepth>\n  : never\n\ntype DeepKeysPrefix<\n  T,\n  TPrefix,\n  TDepth extends any[]\n> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix], [...TDepth, any]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function isNumberArray(d: any): d is number[] {\n  return Array.isArray(d) && d.every(val => typeof val === 'number')\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n", "import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  for (const feature of table._features) {\n    feature.createColumn?.(column, table)\n  }\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n", "import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    feature.createHeader?.(header, table)\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    // Header Groups\n\n    table.getHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, left, right) => {\n        const leftColumns =\n          left\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        const rightColumns =\n          right\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        const centerColumns = leafColumns.filter(\n          column => !left?.includes(column.id) && !right?.includes(column.id)\n        )\n\n        const headerGroups = buildHeaderGroups(\n          allColumns,\n          [...leftColumns, ...centerColumns, ...rightColumns],\n          table\n        )\n\n        return headerGroups\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getCenterHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, left, right) => {\n        leafColumns = leafColumns.filter(\n          column => !left?.includes(column.id) && !right?.includes(column.id)\n        )\n        return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getLeftHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.left,\n      ],\n      (allColumns, leafColumns, left) => {\n        const orderedLeafColumns =\n          left\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'left')\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getRightHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, right) => {\n        const orderedLeafColumns =\n          right\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'right')\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    // Footer Groups\n\n    table.getFooterGroups = memo(\n      () => [table.getHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getLeftFooterGroups = memo(\n      () => [table.getLeftHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getCenterFooterGroups = memo(\n      () => [table.getCenterHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getRightFooterGroups = memo(\n      () => [table.getRightHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    // Flat Headers\n\n    table.getFlatHeaders = memo(\n      () => [table.getHeaderGroups()],\n      headerGroups => {\n        return headerGroups\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getLeftFlatHeaders = memo(\n      () => [table.getLeftHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getCenterFlatHeaders = memo(\n      () => [table.getCenterHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getRightFlatHeaders = memo(\n      () => [table.getRightHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    // Leaf Headers\n\n    table.getCenterLeafHeaders = memo(\n      () => [table.getCenterFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getLeftLeafHeaders = memo(\n      () => [table.getLeftFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getRightLeafHeaders = memo(\n      () => [table.getRightFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getLeafHeaders = memo(\n      () => [\n        table.getLeftHeaderGroups(),\n        table.getCenterHeaderGroups(),\n        table.getRightHeaderGroups(),\n      ],\n      (left, center, right) => {\n        return [\n          ...(left[0]?.headers ?? []),\n          ...(center[0]?.headers ?? []),\n          ...(right[0]?.headers ?? []),\n        ]\n          .map(header => {\n            return header.getLeafHeaders()\n          })\n          .flat()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n", "import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.getSize = () => {\n      const columnSize = table.getState().columnSizing[column.id]\n\n      return Math.min(\n        Math.max(\n          column.columnDef.minSize ?? defaultColumnSizing.minSize,\n          columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n        ),\n        column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n      )\n    }\n    column.getStart = position => {\n      const columns = !position\n        ? table.getVisibleLeafColumns()\n        : position === 'left'\n        ? table.getLeftVisibleLeafColumns()\n        : table.getRightVisibleLeafColumns()\n\n      const index = columns.findIndex(d => d.id === column.id)\n\n      if (index > 0) {\n        const prevSiblingColumn = columns[index - 1]!\n\n        return (\n          prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n        )\n      }\n\n      return 0\n    }\n    column.resetSize = () => {\n      table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n        return rest\n      })\n    }\n    column.getCanResize = () => {\n      return (\n        (column.columnDef.enableResizing ?? true) &&\n        (table.options.enableColumnResizing ?? true)\n      )\n    }\n    column.getIsResizing = () => {\n      return table.getState().columnSizingInfo.isResizingColumn === column.id\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    header.getSize = () => {\n      let sum = 0\n\n      const recurse = (header: Header<TData, TValue>) => {\n        if (header.subHeaders.length) {\n          header.subHeaders.forEach(recurse)\n        } else {\n          sum += header.column.getSize() ?? 0\n        }\n      }\n\n      recurse(header)\n\n      return sum\n    }\n    header.getStart = () => {\n      if (header.index > 0) {\n        const prevSiblingHeader = header.headerGroup.headers[header.index - 1]!\n        return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n      }\n\n      return 0\n    }\n    header.getResizeHandler = () => {\n      const column = table.getColumn(header.column.id)\n      const canResize = column?.getCanResize()\n\n      return (e: unknown) => {\n        if (!column || !canResize) {\n          return\n        }\n\n        ;(e as any).persist?.()\n\n        if (isTouchStartEvent(e)) {\n          // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n          if (e.touches && e.touches.length > 1) {\n            return\n          }\n        }\n\n        const startSize = header.getSize()\n\n        const columnSizingStart: [string, number][] = header\n          ? header.getLeafHeaders().map(d => [d.column.id, d.column.getSize()])\n          : [[column.id, column.getSize()]]\n\n        const clientX = isTouchStartEvent(e)\n          ? Math.round(e.touches[0]!.clientX)\n          : (e as MouseEvent).clientX\n\n        const newColumnSizing: ColumnSizingState = {}\n\n        const updateOffset = (\n          eventType: 'move' | 'end',\n          clientXPos?: number\n        ) => {\n          if (typeof clientXPos !== 'number') {\n            return\n          }\n\n          table.setColumnSizingInfo(old => {\n            const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n            const deltaPercentage = Math.max(\n              deltaOffset / (old?.startSize ?? 0),\n              -0.999999\n            )\n\n            old.columnSizingStart.forEach(([columnId, headerSize]) => {\n              newColumnSizing[columnId] =\n                Math.round(\n                  Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                ) / 100\n            })\n\n            return {\n              ...old,\n              deltaOffset,\n              deltaPercentage,\n            }\n          })\n\n          if (\n            table.options.columnResizeMode === 'onChange' ||\n            eventType === 'end'\n          ) {\n            table.setColumnSizing(old => ({\n              ...old,\n              ...newColumnSizing,\n            }))\n          }\n        }\n\n        const onMove = (clientXPos?: number) => updateOffset('move', clientXPos)\n\n        const onEnd = (clientXPos?: number) => {\n          updateOffset('end', clientXPos)\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            isResizingColumn: false,\n            startOffset: null,\n            startSize: null,\n            deltaOffset: null,\n            deltaPercentage: null,\n            columnSizingStart: [],\n          }))\n        }\n\n        const mouseEvents = {\n          moveHandler: (e: MouseEvent) => onMove(e.clientX),\n          upHandler: (e: MouseEvent) => {\n            document.removeEventListener('mousemove', mouseEvents.moveHandler)\n            document.removeEventListener('mouseup', mouseEvents.upHandler)\n            onEnd(e.clientX)\n          },\n        }\n\n        const touchEvents = {\n          moveHandler: (e: TouchEvent) => {\n            if (e.cancelable) {\n              e.preventDefault()\n              e.stopPropagation()\n            }\n            onMove(e.touches[0]!.clientX)\n            return false\n          },\n          upHandler: (e: TouchEvent) => {\n            document.removeEventListener('touchmove', touchEvents.moveHandler)\n            document.removeEventListener('touchend', touchEvents.upHandler)\n            if (e.cancelable) {\n              e.preventDefault()\n              e.stopPropagation()\n            }\n            onEnd(e.touches[0]?.clientX)\n          },\n        }\n\n        const passiveIfSupported = passiveEventSupported()\n          ? { passive: false }\n          : false\n\n        if (isTouchStartEvent(e)) {\n          document.addEventListener(\n            'touchmove',\n            touchEvents.moveHandler,\n            passiveIfSupported\n          )\n          document.addEventListener(\n            'touchend',\n            touchEvents.upHandler,\n            passiveIfSupported\n          )\n        } else {\n          document.addEventListener(\n            'mousemove',\n            mouseEvents.moveHandler,\n            passiveIfSupported\n          )\n          document.addEventListener(\n            'mouseup',\n            mouseEvents.upHandler,\n            passiveIfSupported\n          )\n        }\n\n        table.setColumnSizingInfo(old => ({\n          ...old,\n          startOffset: clientX,\n          startSize,\n          deltaOffset: 0,\n          deltaPercentage: 0,\n          columnSizingStart,\n          isResizingColumn: column.id,\n        }))\n      }\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnSizing = updater =>\n      table.options.onColumnSizingChange?.(updater)\n    table.setColumnSizingInfo = updater =>\n      table.options.onColumnSizingInfoChange?.(updater)\n    table.resetColumnSizing = defaultState => {\n      table.setColumnSizing(\n        defaultState ? {} : table.initialState.columnSizing ?? {}\n      )\n    }\n    table.resetHeaderSizeInfo = defaultState => {\n      table.setColumnSizingInfo(\n        defaultState\n          ? getDefaultColumnSizingInfoState()\n          : table.initialState.columnSizingInfo ??\n              getDefaultColumnSizingInfoState()\n      )\n    }\n    table.getTotalSize = () =>\n      table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n    table.getLeftTotalSize = () =>\n      table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n    table.getCenterTotalSize = () =>\n      table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n    table.getRightTotalSize = () =>\n      table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n", "import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getIsAllParentsExpanded: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    let registered = false\n    let queued = false\n\n    table._autoResetExpanded = () => {\n      if (!registered) {\n        table._queue(() => {\n          registered = true\n        })\n        return\n      }\n\n      if (\n        table.options.autoResetAll ??\n        table.options.autoResetExpanded ??\n        !table.options.manualExpanding\n      ) {\n        if (queued) return\n        queued = true\n        table._queue(() => {\n          table.resetExpanded()\n          queued = false\n        })\n      }\n    }\n    table.setExpanded = updater => table.options.onExpandedChange?.(updater)\n    table.toggleAllRowsExpanded = expanded => {\n      if (expanded ?? !table.getIsAllRowsExpanded()) {\n        table.setExpanded(true)\n      } else {\n        table.setExpanded({})\n      }\n    }\n    table.resetExpanded = defaultState => {\n      table.setExpanded(defaultState ? {} : table.initialState?.expanded ?? {})\n    }\n    table.getCanSomeRowsExpand = () => {\n      return table\n        .getPrePaginationRowModel()\n        .flatRows.some(row => row.getCanExpand())\n    }\n    table.getToggleAllRowsExpandedHandler = () => {\n      return (e: unknown) => {\n        ;(e as any).persist?.()\n        table.toggleAllRowsExpanded()\n      }\n    }\n    table.getIsSomeRowsExpanded = () => {\n      const expanded = table.getState().expanded\n      return expanded === true || Object.values(expanded).some(Boolean)\n    }\n    table.getIsAllRowsExpanded = () => {\n      const expanded = table.getState().expanded\n\n      // If expanded is true, save some cycles and return true\n      if (typeof expanded === 'boolean') {\n        return expanded === true\n      }\n\n      if (!Object.keys(expanded).length) {\n        return false\n      }\n\n      // If any row is not expanded, return false\n      if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n        return false\n      }\n\n      // They must all be expanded :shrug:\n      return true\n    }\n    table.getExpandedDepth = () => {\n      let maxDepth = 0\n\n      const rowIds =\n        table.getState().expanded === true\n          ? Object.keys(table.getRowModel().rowsById)\n          : Object.keys(table.getState().expanded)\n\n      rowIds.forEach(id => {\n        const splitId = id.split('.')\n        maxDepth = Math.max(maxDepth, splitId.length)\n      })\n\n      return maxDepth\n    }\n    table.getPreExpandedRowModel = () => table.getSortedRowModel()\n    table.getExpandedRowModel = () => {\n      if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n        table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n      }\n\n      if (table.options.manualExpanding || !table._getExpandedRowModel) {\n        return table.getPreExpandedRowModel()\n      }\n\n      return table._getExpandedRowModel()\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.toggleExpanded = expanded => {\n      table.setExpanded(old => {\n        const exists = old === true ? true : !!old?.[row.id]\n\n        let oldExpanded: ExpandedStateList = {}\n\n        if (old === true) {\n          Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n            oldExpanded[rowId] = true\n          })\n        } else {\n          oldExpanded = old\n        }\n\n        expanded = expanded ?? !exists\n\n        if (!exists && expanded) {\n          return {\n            ...oldExpanded,\n            [row.id]: true,\n          }\n        }\n\n        if (exists && !expanded) {\n          const { [row.id]: _, ...rest } = oldExpanded\n          return rest\n        }\n\n        return old\n      })\n    }\n    row.getIsExpanded = () => {\n      const expanded = table.getState().expanded\n\n      return !!(\n        table.options.getIsRowExpanded?.(row) ??\n        (expanded === true || expanded?.[row.id])\n      )\n    }\n    row.getCanExpand = () => {\n      return (\n        table.options.getRowCanExpand?.(row) ??\n        ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n      )\n    }\n    row.getIsAllParentsExpanded = () => {\n      let isFullyExpanded = true\n      let currentRow = row\n\n      while (isFullyExpanded && currentRow.parentId) {\n        currentRow = table.getRow(currentRow.parentId, true)\n        isFullyExpanded = currentRow.getIsExpanded()\n      }\n\n      return isFullyExpanded\n    }\n    row.getToggleExpandedHandler = () => {\n      const canExpand = row.getCanExpand()\n\n      return () => {\n        if (!canExpand) return\n        row.toggleExpanded()\n      }\n    }\n  },\n}\n", "import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(\n    row\n      .getValue<string | null>(columnId)\n      ?.toString()\n      ?.toLowerCase()\n      ?.includes(search)\n  )\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(\n    row.getValue<string | null>(columnId)?.toString()?.includes(filterValue)\n  )\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string | null>(columnId)?.toString()?.toLowerCase() ===\n    filterValue?.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n", "import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): void => {\n    column.getAutoFilterFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0]\n\n      const value = firstRow?.getValue(column.id)\n\n      if (typeof value === 'string') {\n        return filterFns.includesString\n      }\n\n      if (typeof value === 'number') {\n        return filterFns.inNumberRange\n      }\n\n      if (typeof value === 'boolean') {\n        return filterFns.equals\n      }\n\n      if (value !== null && typeof value === 'object') {\n        return filterFns.equals\n      }\n\n      if (Array.isArray(value)) {\n        return filterFns.arrIncludes\n      }\n\n      return filterFns.weakEquals\n    }\n    column.getFilterFn = () => {\n      return isFunction(column.columnDef.filterFn)\n        ? column.columnDef.filterFn\n        : column.columnDef.filterFn === 'auto'\n        ? column.getAutoFilterFn()\n        : // @ts-ignore\n          table.options.filterFns?.[column.columnDef.filterFn as string] ??\n          filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n    }\n    column.getCanFilter = () => {\n      return (\n        (column.columnDef.enableColumnFilter ?? true) &&\n        (table.options.enableColumnFilters ?? true) &&\n        (table.options.enableFilters ?? true) &&\n        !!column.accessorFn\n      )\n    }\n\n    column.getCanGlobalFilter = () => {\n      return (\n        (column.columnDef.enableGlobalFilter ?? true) &&\n        (table.options.enableGlobalFilter ?? true) &&\n        (table.options.enableFilters ?? true) &&\n        (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n        !!column.accessorFn\n      )\n    }\n\n    column.getIsFiltered = () => column.getFilterIndex() > -1\n\n    column.getFilterValue = () =>\n      table.getState().columnFilters?.find(d => d.id === column.id)?.value\n\n    column.getFilterIndex = () =>\n      table.getState().columnFilters?.findIndex(d => d.id === column.id) ?? -1\n\n    column.setFilterValue = value => {\n      table.setColumnFilters(old => {\n        const filterFn = column.getFilterFn()\n        const previousfilter = old?.find(d => d.id === column.id)\n\n        const newFilter = functionalUpdate(\n          value,\n          previousfilter ? previousfilter.value : undefined\n        )\n\n        //\n        if (\n          shouldAutoRemoveFilter(filterFn as FilterFn<TData>, newFilter, column)\n        ) {\n          return old?.filter(d => d.id !== column.id) ?? []\n        }\n\n        const newFilterObj = { id: column.id, value: newFilter }\n\n        if (previousfilter) {\n          return (\n            old?.map(d => {\n              if (d.id === column.id) {\n                return newFilterObj\n              }\n              return d\n            }) ?? []\n          )\n        }\n\n        if (old?.length) {\n          return [...old, newFilterObj]\n        }\n\n        return [newFilterObj]\n      })\n    }\n    column._getFacetedRowModel =\n      table.options.getFacetedRowModel &&\n      table.options.getFacetedRowModel(table, column.id)\n    column.getFacetedRowModel = () => {\n      if (!column._getFacetedRowModel) {\n        return table.getPreFilteredRowModel()\n      }\n\n      return column._getFacetedRowModel()\n    }\n    column._getFacetedUniqueValues =\n      table.options.getFacetedUniqueValues &&\n      table.options.getFacetedUniqueValues(table, column.id)\n    column.getFacetedUniqueValues = () => {\n      if (!column._getFacetedUniqueValues) {\n        return new Map()\n      }\n\n      return column._getFacetedUniqueValues()\n    }\n    column._getFacetedMinMaxValues =\n      table.options.getFacetedMinMaxValues &&\n      table.options.getFacetedMinMaxValues(table, column.id)\n    column.getFacetedMinMaxValues = () => {\n      if (!column._getFacetedMinMaxValues) {\n        return undefined\n      }\n\n      return column._getFacetedMinMaxValues()\n    }\n    // () => [column.getFacetedRowModel()],\n    // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.columnFilters = {}\n    row.columnFiltersMeta = {}\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.getGlobalAutoFilterFn = () => {\n      return filterFns.includesString\n    }\n\n    table.getGlobalFilterFn = () => {\n      const { globalFilterFn: globalFilterFn } = table.options\n\n      return isFunction(globalFilterFn)\n        ? globalFilterFn\n        : globalFilterFn === 'auto'\n        ? table.getGlobalAutoFilterFn()\n        : // @ts-ignore\n          table.options.filterFns?.[globalFilterFn as string] ??\n          filterFns[globalFilterFn as BuiltInFilterFn]\n    }\n\n    table.setColumnFilters = (updater: Updater<ColumnFiltersState>) => {\n      const leafColumns = table.getAllLeafColumns()\n\n      const updateFn = (old: ColumnFiltersState) => {\n        return functionalUpdate(updater, old)?.filter(filter => {\n          const column = leafColumns.find(d => d.id === filter.id)\n\n          if (column) {\n            const filterFn = column.getFilterFn()\n\n            if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n              return false\n            }\n          }\n\n          return true\n        })\n      }\n\n      table.options.onColumnFiltersChange?.(updateFn)\n    }\n\n    table.setGlobalFilter = updater => {\n      table.options.onGlobalFilterChange?.(updater)\n    }\n\n    table.resetGlobalFilter = defaultState => {\n      table.setGlobalFilter(\n        defaultState ? undefined : table.initialState.globalFilter\n      )\n    }\n\n    table.resetColumnFilters = defaultState => {\n      table.setColumnFilters(\n        defaultState ? [] : table.initialState?.columnFilters ?? []\n      )\n    }\n\n    table.getPreFilteredRowModel = () => table.getCoreRowModel()\n    table.getFilteredRowModel = () => {\n      if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n        table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n      }\n\n      if (table.options.manualFiltering || !table._getFilteredRowModel) {\n        return table.getPreFilteredRowModel()\n      }\n\n      return table._getFilteredRowModel()\n    }\n\n    table._getGlobalFacetedRowModel =\n      table.options.getFacetedRowModel &&\n      table.options.getFacetedRowModel(table, '__global__')\n\n    table.getGlobalFacetedRowModel = () => {\n      if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n        return table.getPreFilteredRowModel()\n      }\n\n      return table._getGlobalFacetedRowModel()\n    }\n\n    table._getGlobalFacetedUniqueValues =\n      table.options.getFacetedUniqueValues &&\n      table.options.getFacetedUniqueValues(table, '__global__')\n    table.getGlobalFacetedUniqueValues = () => {\n      if (!table._getGlobalFacetedUniqueValues) {\n        return new Map()\n      }\n\n      return table._getGlobalFacetedUniqueValues()\n    }\n\n    table._getGlobalFacetedMinMaxValues =\n      table.options.getFacetedMinMaxValues &&\n      table.options.getFacetedMinMaxValues(table, '__global__')\n    table.getGlobalFacetedMinMaxValues = () => {\n      if (!table._getGlobalFacetedMinMaxValues) {\n        return\n      }\n\n      return table._getGlobalFacetedMinMaxValues()\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n", "import { AggregationFn } from './features/Grouping'\nimport { isNumberArray } from './utils'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  const values = leafRows.map(row => row.getValue(columnId))\n  if (!isNumberArray(values)) {\n    return\n  }\n  if (values.length === 1) {\n    return values[0]\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = values.sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1]! + nums[mid]!) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n", "import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n  getGroupingValue?: (row: TData) => any\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  getGroupingValue: (columnId: string) => unknown\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.toggleGrouping = () => {\n      table.setGrouping(old => {\n        // Find any existing grouping for this column\n        if (old?.includes(column.id)) {\n          return old.filter(d => d !== column.id)\n        }\n\n        return [...(old ?? []), column.id]\n      })\n    }\n\n    column.getCanGroup = () => {\n      return (\n        column.columnDef.enableGrouping ??\n        true ??\n        table.options.enableGrouping ??\n        true ??\n        !!column.accessorFn\n      )\n    }\n\n    column.getIsGrouped = () => {\n      return table.getState().grouping?.includes(column.id)\n    }\n\n    column.getGroupedIndex = () => table.getState().grouping?.indexOf(column.id)\n\n    column.getToggleGroupingHandler = () => {\n      const canGroup = column.getCanGroup()\n\n      return () => {\n        if (!canGroup) return\n        column.toggleGrouping()\n      }\n    }\n    column.getAutoAggregationFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0]\n\n      const value = firstRow?.getValue(column.id)\n\n      if (typeof value === 'number') {\n        return aggregationFns.sum\n      }\n\n      if (Object.prototype.toString.call(value) === '[object Date]') {\n        return aggregationFns.extent\n      }\n    }\n    column.getAggregationFn = () => {\n      if (!column) {\n        throw new Error()\n      }\n\n      return isFunction(column.columnDef.aggregationFn)\n        ? column.columnDef.aggregationFn\n        : column.columnDef.aggregationFn === 'auto'\n        ? column.getAutoAggregationFn()\n        : table.options.aggregationFns?.[\n            column.columnDef.aggregationFn as string\n          ] ??\n          aggregationFns[column.columnDef.aggregationFn as BuiltInAggregationFn]\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setGrouping = updater => table.options.onGroupingChange?.(updater)\n\n    table.resetGrouping = defaultState => {\n      table.setGrouping(defaultState ? [] : table.initialState?.grouping ?? [])\n    }\n\n    table.getPreGroupedRowModel = () => table.getFilteredRowModel()\n    table.getGroupedRowModel = () => {\n      if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n        table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n      }\n\n      if (table.options.manualGrouping || !table._getGroupedRowModel) {\n        return table.getPreGroupedRowModel()\n      }\n\n      return table._getGroupedRowModel()\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.getIsGrouped = () => !!row.groupingColumnId\n    row.getGroupingValue = columnId => {\n      if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n        return row._groupingValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.columnDef.getGroupingValue) {\n        return row.getValue(columnId)\n      }\n\n      row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(\n        row.original\n      )\n\n      return row._groupingValuesCache[columnId]\n    }\n    row._groupingValuesCache = {}\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    cell.getIsGrouped = () =>\n      column.getIsGrouped() && column.id === row.groupingColumnId\n    cell.getIsPlaceholder = () => !cell.getIsGrouped() && column.getIsGrouped()\n    cell.getIsAggregated = () =>\n      !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!row.subRows?.length\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n", "import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnOrder = updater =>\n      table.options.onColumnOrderChange?.(updater)\n    table.resetColumnOrder = defaultState => {\n      table.setColumnOrder(\n        defaultState ? [] : table.initialState.columnOrder ?? []\n      )\n    }\n    table._getOrderColumnsFn = memo(\n      () => [\n        table.getState().columnOrder,\n        table.getState().grouping,\n        table.options.groupedColumnMode,\n      ],\n      (columnOrder, grouping, groupedColumnMode) => columns => {\n        // Sort grouped columns to the start of the column list\n        // before the headers are built\n        let orderedColumns: Column<TData, unknown>[] = []\n\n        // If there is no order, return the normal columns\n        if (!columnOrder?.length) {\n          orderedColumns = columns\n        } else {\n          const columnOrderCopy = [...columnOrder]\n\n          // If there is an order, make a copy of the columns\n          const columnsCopy = [...columns]\n\n          // And make a new ordered array of the columns\n\n          // Loop over the columns and place them in order into the new array\n          while (columnsCopy.length && columnOrderCopy.length) {\n            const targetColumnId = columnOrderCopy.shift()\n            const foundIndex = columnsCopy.findIndex(\n              d => d.id === targetColumnId\n            )\n            if (foundIndex > -1) {\n              orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n            }\n          }\n\n          // If there are any columns left, add them to the end\n          orderedColumns = [...orderedColumns, ...columnsCopy]\n        }\n\n        return orderColumns(orderedColumns, grouping, groupedColumnMode)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n        // debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n  },\n}\n", "import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    let registered = false\n    let queued = false\n\n    table._autoResetPageIndex = () => {\n      if (!registered) {\n        table._queue(() => {\n          registered = true\n        })\n        return\n      }\n\n      if (\n        table.options.autoResetAll ??\n        table.options.autoResetPageIndex ??\n        !table.options.manualPagination\n      ) {\n        if (queued) return\n        queued = true\n        table._queue(() => {\n          table.resetPageIndex()\n          queued = false\n        })\n      }\n    }\n    table.setPagination = updater => {\n      const safeUpdater: Updater<PaginationState> = old => {\n        let newState = functionalUpdate(updater, old)\n\n        return newState\n      }\n\n      return table.options.onPaginationChange?.(safeUpdater)\n    }\n    table.resetPagination = defaultState => {\n      table.setPagination(\n        defaultState\n          ? getDefaultPaginationState()\n          : table.initialState.pagination ?? getDefaultPaginationState()\n      )\n    }\n    table.setPageIndex = updater => {\n      table.setPagination(old => {\n        let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n        const maxPageIndex =\n          typeof table.options.pageCount === 'undefined' ||\n          table.options.pageCount === -1\n            ? Number.MAX_SAFE_INTEGER\n            : table.options.pageCount - 1\n\n        pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n        return {\n          ...old,\n          pageIndex,\n        }\n      })\n    }\n    table.resetPageIndex = defaultState => {\n      table.setPageIndex(\n        defaultState\n          ? defaultPageIndex\n          : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n      )\n    }\n    table.resetPageSize = defaultState => {\n      table.setPageSize(\n        defaultState\n          ? defaultPageSize\n          : table.initialState?.pagination?.pageSize ?? defaultPageSize\n      )\n    }\n    table.setPageSize = updater => {\n      table.setPagination(old => {\n        const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n        const topRowIndex = old.pageSize * old.pageIndex!\n        const pageIndex = Math.floor(topRowIndex / pageSize)\n\n        return {\n          ...old,\n          pageIndex,\n          pageSize,\n        }\n      })\n    }\n    table.setPageCount = updater =>\n      table.setPagination(old => {\n        let newPageCount = functionalUpdate(\n          updater,\n          table.options.pageCount ?? -1\n        )\n\n        if (typeof newPageCount === 'number') {\n          newPageCount = Math.max(-1, newPageCount)\n        }\n\n        return {\n          ...old,\n          pageCount: newPageCount,\n        }\n      })\n\n    table.getPageOptions = memo(\n      () => [table.getPageCount()],\n      pageCount => {\n        let pageOptions: number[] = []\n        if (pageCount && pageCount > 0) {\n          pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n        }\n        return pageOptions\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n\n    table.getCanPreviousPage = () => table.getState().pagination.pageIndex > 0\n\n    table.getCanNextPage = () => {\n      const { pageIndex } = table.getState().pagination\n\n      const pageCount = table.getPageCount()\n\n      if (pageCount === -1) {\n        return true\n      }\n\n      if (pageCount === 0) {\n        return false\n      }\n\n      return pageIndex < pageCount - 1\n    }\n\n    table.previousPage = () => {\n      return table.setPageIndex(old => old - 1)\n    }\n\n    table.nextPage = () => {\n      return table.setPageIndex(old => {\n        return old + 1\n      })\n    }\n\n    table.getPrePaginationRowModel = () => table.getExpandedRowModel()\n    table.getPaginationRowModel = () => {\n      if (\n        !table._getPaginationRowModel &&\n        table.options.getPaginationRowModel\n      ) {\n        table._getPaginationRowModel =\n          table.options.getPaginationRowModel(table)\n      }\n\n      if (table.options.manualPagination || !table._getPaginationRowModel) {\n        return table.getPrePaginationRowModel()\n      }\n\n      return table._getPaginationRowModel()\n    }\n\n    table.getPageCount = () => {\n      return (\n        table.options.pageCount ??\n        Math.ceil(\n          table.getPrePaginationRowModel().rows.length /\n            table.getState().pagination.pageSize\n        )\n      )\n    }\n  },\n}\n", "import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\nexport type RowPinningPosition = false | 'top' | 'bottom'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface RowPinningState {\n  top?: string[]\n  bottom?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface RowPinningTableState {\n  rowPinning: RowPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n  enableColumnPinning?: boolean\n}\n\nexport interface RowPinningOptions<TData extends RowData> {\n  onRowPinningChange?: OnChangeFn<RowPinningState>\n  enableRowPinning?: boolean | ((row: Row<TData>) => boolean)\n  keepPinnedRows?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface RowPinningDefaultOptions {\n  onRowPinningChange: OnChangeFn<RowPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface RowPinningRow {\n  getCanPin: () => boolean\n  getIsPinned: () => RowPinningPosition\n  getPinnedIndex: () => number\n  pin: (\n    position: RowPinningPosition,\n    includeLeafRows?: boolean,\n    includeParentRows?: boolean\n  ) => void\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\nexport interface RowPinningInstance<TData extends RowData> {\n  setRowPinning: (updater: Updater<RowPinningState>) => void\n  resetRowPinning: (defaultState?: boolean) => void\n  getIsSomeRowsPinned: (position?: RowPinningPosition) => boolean\n  _getPinnedRows: (position: 'top' | 'bottom') => Row<TData>[]\n  getTopRows: () => Row<TData>[]\n  getBottomRows: () => Row<TData>[]\n  getCenterRows: () => Row<TData>[]\n}\n\n//\n\nconst getDefaultColumnPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nconst getDefaultRowPinningState = (): RowPinningState => ({\n  top: [],\n  bottom: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState & RowPinningState => {\n    return {\n      columnPinning: getDefaultColumnPinningState(),\n      rowPinning: getDefaultRowPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions & RowPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n      onRowPinningChange: makeStateUpdater('rowPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.pin = position => {\n      const columnIds = column\n        .getLeafColumns()\n        .map(d => d.id)\n        .filter(Boolean) as string[]\n\n      table.setColumnPinning(old => {\n        if (position === 'right') {\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: [\n              ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n              ...columnIds,\n            ],\n          }\n        }\n\n        if (position === 'left') {\n          return {\n            left: [\n              ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              ...columnIds,\n            ],\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        }\n\n        return {\n          left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n          right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n        }\n      })\n    }\n\n    column.getCanPin = () => {\n      const leafColumns = column.getLeafColumns()\n\n      return leafColumns.some(\n        d =>\n          (d.columnDef.enablePinning ?? true) &&\n          (table.options.enableColumnPinning ??\n            table.options.enablePinning ??\n            true)\n      )\n    }\n\n    column.getIsPinned = () => {\n      const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n      const { left, right } = table.getState().columnPinning\n\n      const isLeft = leafColumnIds.some(d => left?.includes(d))\n      const isRight = leafColumnIds.some(d => right?.includes(d))\n\n      return isLeft ? 'left' : isRight ? 'right' : false\n    }\n\n    column.getPinnedIndex = () => {\n      const position = column.getIsPinned()\n\n      return position\n        ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n        : 0\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.pin = (position, includeLeafRows, includeParentRows) => {\n      const leafRowIds = includeLeafRows\n        ? row.getLeafRows().map(({ id }) => id)\n        : []\n      const parentRowIds = includeParentRows\n        ? row.getParentRows().map(({ id }) => id)\n        : []\n      const rowIds = new Set([...parentRowIds, row.id, ...leafRowIds])\n\n      table.setRowPinning(old => {\n        if (position === 'bottom') {\n          return {\n            top: (old?.top ?? []).filter(d => !rowIds?.has(d)),\n            bottom: [\n              ...(old?.bottom ?? []).filter(d => !rowIds?.has(d)),\n              ...rowIds,\n            ],\n          }\n        }\n\n        if (position === 'top') {\n          return {\n            top: [...(old?.top ?? []).filter(d => !rowIds?.has(d)), ...rowIds],\n            bottom: (old?.bottom ?? []).filter(d => !rowIds?.has(d)),\n          }\n        }\n\n        return {\n          top: (old?.top ?? []).filter(d => !rowIds?.has(d)),\n          bottom: (old?.bottom ?? []).filter(d => !rowIds?.has(d)),\n        }\n      })\n    }\n    row.getCanPin = () => {\n      const { enableRowPinning, enablePinning } = table.options\n      if (typeof enableRowPinning === 'function') {\n        return enableRowPinning(row)\n      }\n      return enableRowPinning ?? enablePinning ?? true\n    }\n    row.getIsPinned = () => {\n      const rowIds = [row.id]\n\n      const { top, bottom } = table.getState().rowPinning\n\n      const isTop = rowIds.some(d => top?.includes(d))\n      const isBottom = rowIds.some(d => bottom?.includes(d))\n\n      return isTop ? 'top' : isBottom ? 'bottom' : false\n    }\n    row.getPinnedIndex = () => {\n      const position = row.getIsPinned()\n      if (!position) return -1\n\n      const visiblePinnedRowIds = table\n        ._getPinnedRows(position)\n        ?.map(({ id }) => id)\n\n      return visiblePinnedRowIds?.indexOf(row.id) ?? -1\n    }\n    row.getCenterVisibleCells = memo(\n      () => [\n        row._getAllVisibleCells(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allCells, left, right) => {\n        const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n        return allCells.filter(d => !leftAndRight.includes(d.column.id))\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' && 'row.getCenterVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    )\n    row.getLeftVisibleCells = memo(\n      () => [row._getAllVisibleCells(), table.getState().columnPinning.left, ,],\n      (allCells, left) => {\n        const cells = (left ?? [])\n          .map(columnId => allCells.find(cell => cell.column.id === columnId)!)\n          .filter(Boolean)\n          .map(d => ({ ...d, position: 'left' }) as Cell<TData, unknown>)\n\n        return cells\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' && 'row.getLeftVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    )\n    row.getRightVisibleCells = memo(\n      () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n      (allCells, right) => {\n        const cells = (right ?? [])\n          .map(columnId => allCells.find(cell => cell.column.id === columnId)!)\n          .filter(Boolean)\n          .map(d => ({ ...d, position: 'right' }) as Cell<TData, unknown>)\n\n        return cells\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' && 'row.getRightVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    )\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnPinning = updater =>\n      table.options.onColumnPinningChange?.(updater)\n\n    table.resetColumnPinning = defaultState =>\n      table.setColumnPinning(\n        defaultState\n          ? getDefaultColumnPinningState()\n          : table.initialState?.columnPinning ?? getDefaultColumnPinningState()\n      )\n\n    table.getIsSomeColumnsPinned = position => {\n      const pinningState = table.getState().columnPinning\n\n      if (!position) {\n        return Boolean(pinningState.left?.length || pinningState.right?.length)\n      }\n      return Boolean(pinningState[position]?.length)\n    }\n\n    table.getLeftLeafColumns = memo(\n      () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n      (allColumns, left) => {\n        return (left ?? [])\n          .map(columnId => allColumns.find(column => column.id === columnId)!)\n          .filter(Boolean)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    )\n\n    table.getRightLeafColumns = memo(\n      () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n      (allColumns, right) => {\n        return (right ?? [])\n          .map(columnId => allColumns.find(column => column.id === columnId)!)\n          .filter(Boolean)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    )\n\n    table.getCenterLeafColumns = memo(\n      () => [\n        table.getAllLeafColumns(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, left, right) => {\n        const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n        return allColumns.filter(d => !leftAndRight.includes(d.id))\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    )\n\n    table.setRowPinning = updater => table.options.onRowPinningChange?.(updater)\n\n    table.resetRowPinning = defaultState =>\n      table.setRowPinning(\n        defaultState\n          ? getDefaultRowPinningState()\n          : table.initialState?.rowPinning ?? getDefaultRowPinningState()\n      )\n\n    table.getIsSomeRowsPinned = position => {\n      const pinningState = table.getState().rowPinning\n\n      if (!position) {\n        return Boolean(pinningState.top?.length || pinningState.bottom?.length)\n      }\n      return Boolean(pinningState[position]?.length)\n    }\n\n    table._getPinnedRows = (position: 'top' | 'bottom') =>\n      memo(\n        () => [table.getRowModel().rows, table.getState().rowPinning[position]],\n        (visibleRows, pinnedRowIds) => {\n          const rows =\n            table.options.keepPinnedRows ?? true\n              ? //get all rows that are pinned even if they would not be otherwise visible\n                //account for expanded parent rows, but not pagination or filtering\n                (pinnedRowIds ?? []).map(rowId => {\n                  const row = table.getRow(rowId, true)\n                  return row.getIsAllParentsExpanded() ? row : null\n                })\n              : //else get only visible rows that are pinned\n                (pinnedRowIds ?? []).map(\n                  rowId => visibleRows.find(row => row.id === rowId)!\n                )\n\n          return rows\n            .filter(Boolean)\n            .map(d => ({ ...d, position })) as Row<TData>[]\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' &&\n            `row.get${position === 'top' ? 'Top' : 'Bottom'}Rows`,\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      )()\n\n    table.getTopRows = () => table._getPinnedRows('top')\n\n    table.getBottomRows = () => table._getPinnedRows('bottom')\n\n    table.getCenterRows = memo(\n      () => [\n        table.getRowModel().rows,\n        table.getState().rowPinning.top,\n        table.getState().rowPinning.bottom,\n      ],\n      (allRows, top, bottom) => {\n        const topAndBottom = new Set([...(top ?? []), ...(bottom ?? [])])\n        return allRows.filter(d => !topAndBottom.has(d.id))\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getCenterRows',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    )\n  },\n}\n", "import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setRowSelection = updater =>\n      table.options.onRowSelectionChange?.(updater)\n    table.resetRowSelection = defaultState =>\n      table.setRowSelection(\n        defaultState ? {} : table.initialState.rowSelection ?? {}\n      )\n    table.toggleAllRowsSelected = value => {\n      table.setRowSelection(old => {\n        value =\n          typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n        const rowSelection = { ...old }\n\n        const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n        // We don't use `mutateRowIsSelected` here for performance reasons.\n        // All of the rows are flat already, so it wouldn't be worth it\n        if (value) {\n          preGroupedFlatRows.forEach(row => {\n            if (!row.getCanSelect()) {\n              return\n            }\n            rowSelection[row.id] = true\n          })\n        } else {\n          preGroupedFlatRows.forEach(row => {\n            delete rowSelection[row.id]\n          })\n        }\n\n        return rowSelection\n      })\n    }\n    table.toggleAllPageRowsSelected = value =>\n      table.setRowSelection(old => {\n        const resolvedValue =\n          typeof value !== 'undefined'\n            ? value\n            : !table.getIsAllPageRowsSelected()\n\n        const rowSelection: RowSelectionState = { ...old }\n\n        table.getRowModel().rows.forEach(row => {\n          mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n        })\n\n        return rowSelection\n      })\n\n    // addRowSelectionRange: rowId => {\n    //   const {\n    //     rows,\n    //     rowsById,\n    //     options: { selectGroupingRows, selectSubRows },\n    //   } = table\n\n    //   const findSelectedRow = (rows: Row[]) => {\n    //     let found\n    //     rows.find(d => {\n    //       if (d.getIsSelected()) {\n    //         found = d\n    //         return true\n    //       }\n    //       const subFound = findSelectedRow(d.subRows || [])\n    //       if (subFound) {\n    //         found = subFound\n    //         return true\n    //       }\n    //       return false\n    //     })\n    //     return found\n    //   }\n\n    //   const firstRow = findSelectedRow(rows) || rows[0]\n    //   const lastRow = rowsById[rowId]\n\n    //   let include = false\n    //   const selectedRowIds = {}\n\n    //   const addRow = (row: Row) => {\n    //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n    //       rowsById,\n    //       selectGroupingRows: selectGroupingRows!,\n    //       selectSubRows: selectSubRows!,\n    //     })\n    //   }\n\n    //   table.rows.forEach(row => {\n    //     const isFirstRow = row.id === firstRow.id\n    //     const isLastRow = row.id === lastRow.id\n\n    //     if (isFirstRow || isLastRow) {\n    //       if (!include) {\n    //         include = true\n    //       } else if (include) {\n    //         addRow(row)\n    //         include = false\n    //       }\n    //     }\n\n    //     if (include) {\n    //       addRow(row)\n    //     }\n    //   })\n\n    //   table.setRowSelection(selectedRowIds)\n    // },\n    table.getPreSelectedRowModel = () => table.getCoreRowModel()\n    table.getSelectedRowModel = memo(\n      () => [table.getState().rowSelection, table.getCoreRowModel()],\n      (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {},\n          }\n        }\n\n        return selectRowsFn(table, rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n\n    table.getFilteredSelectedRowModel = memo(\n      () => [table.getState().rowSelection, table.getFilteredRowModel()],\n      (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {},\n          }\n        }\n\n        return selectRowsFn(table, rowModel)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' &&\n          'getFilteredSelectedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n\n    table.getGroupedSelectedRowModel = memo(\n      () => [table.getState().rowSelection, table.getSortedRowModel()],\n      (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {},\n          }\n        }\n\n        return selectRowsFn(table, rowModel)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'getGroupedSelectedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n\n    ///\n\n    // getGroupingRowCanSelect: rowId => {\n    //   const row = table.getRow(rowId)\n\n    //   if (!row) {\n    //     throw new Error()\n    //   }\n\n    //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n    //     return table.options.enableGroupingRowSelection(row)\n    //   }\n\n    //   return table.options.enableGroupingRowSelection ?? false\n    // },\n\n    table.getIsAllRowsSelected = () => {\n      const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n      const { rowSelection } = table.getState()\n\n      let isAllRowsSelected = Boolean(\n        preGroupedFlatRows.length && Object.keys(rowSelection).length\n      )\n\n      if (isAllRowsSelected) {\n        if (\n          preGroupedFlatRows.some(\n            row => row.getCanSelect() && !rowSelection[row.id]\n          )\n        ) {\n          isAllRowsSelected = false\n        }\n      }\n\n      return isAllRowsSelected\n    }\n\n    table.getIsAllPageRowsSelected = () => {\n      const paginationFlatRows = table\n        .getPaginationRowModel()\n        .flatRows.filter(row => row.getCanSelect())\n      const { rowSelection } = table.getState()\n\n      let isAllPageRowsSelected = !!paginationFlatRows.length\n\n      if (\n        isAllPageRowsSelected &&\n        paginationFlatRows.some(row => !rowSelection[row.id])\n      ) {\n        isAllPageRowsSelected = false\n      }\n\n      return isAllPageRowsSelected\n    }\n\n    table.getIsSomeRowsSelected = () => {\n      const totalSelected = Object.keys(\n        table.getState().rowSelection ?? {}\n      ).length\n      return (\n        totalSelected > 0 &&\n        totalSelected < table.getFilteredRowModel().flatRows.length\n      )\n    }\n\n    table.getIsSomePageRowsSelected = () => {\n      const paginationFlatRows = table.getPaginationRowModel().flatRows\n      return table.getIsAllPageRowsSelected()\n        ? false\n        : paginationFlatRows\n            .filter(row => row.getCanSelect())\n            .some(d => d.getIsSelected() || d.getIsSomeSelected())\n    }\n\n    table.getToggleAllRowsSelectedHandler = () => {\n      return (e: unknown) => {\n        table.toggleAllRowsSelected(\n          ((e as MouseEvent).target as HTMLInputElement).checked\n        )\n      }\n    }\n\n    table.getToggleAllPageRowsSelectedHandler = () => {\n      return (e: unknown) => {\n        table.toggleAllPageRowsSelected(\n          ((e as MouseEvent).target as HTMLInputElement).checked\n        )\n      }\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.toggleSelected = value => {\n      const isSelected = row.getIsSelected()\n\n      table.setRowSelection(old => {\n        value = typeof value !== 'undefined' ? value : !isSelected\n\n        if (row.getCanSelect() && isSelected === value) {\n          return old\n        }\n\n        const selectedRowIds = { ...old }\n\n        mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n        return selectedRowIds\n      })\n    }\n    row.getIsSelected = () => {\n      const { rowSelection } = table.getState()\n      return isRowSelected(row, rowSelection)\n    }\n\n    row.getIsSomeSelected = () => {\n      const { rowSelection } = table.getState()\n      return isSubRowSelected(row, rowSelection, table) === 'some'\n    }\n\n    row.getIsAllSubRowsSelected = () => {\n      const { rowSelection } = table.getState()\n      return isSubRowSelected(row, rowSelection, table) === 'all'\n    }\n\n    row.getCanSelect = () => {\n      if (typeof table.options.enableRowSelection === 'function') {\n        return table.options.enableRowSelection(row)\n      }\n\n      return table.options.enableRowSelection ?? true\n    }\n\n    row.getCanSelectSubRows = () => {\n      if (typeof table.options.enableSubRowSelection === 'function') {\n        return table.options.enableSubRowSelection(row)\n      }\n\n      return table.options.enableSubRowSelection ?? true\n    }\n\n    row.getCanMultiSelect = () => {\n      if (typeof table.options.enableMultiRowSelection === 'function') {\n        return table.options.enableMultiRowSelection(row)\n      }\n\n      return table.options.enableMultiRowSelection ?? true\n    }\n    row.getToggleSelectedHandler = () => {\n      const canSelect = row.getCanSelect()\n\n      return (e: unknown) => {\n        if (!canSelect) return\n        row.toggleSelected(\n          ((e as MouseEvent).target as HTMLInputElement)?.checked\n        )\n      }\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (!row.subRows?.length) return false\n  \n  let allChildrenSelected = true\n  let someSelected = false\n\n  row.subRows.forEach(subRow => {\n    // Bail out early if we know both of these\n    if (someSelected && !allChildrenSelected) {\n      return\n    }\n\n    if (subRow.getCanSelect()) {\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    }\n\n    // Check row selection of nested subrows\n    if (subRow.subRows && subRow.subRows.length) {\n      const subRowChildrenSelected = isSubRowSelected(subRow, selection, table)\n      if (subRowChildrenSelected === 'all') {\n        someSelected = true\n      } else if (subRowChildrenSelected === 'some') {\n        someSelected = true\n        allChildrenSelected = false\n      } else {\n        allChildrenSelected = false\n      }\n    }\n  })\n\n  return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n}\n", "import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n", "import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n      sortUndefined: 1,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.getAutoSortingFn = () => {\n      const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n      let isString = false\n\n      for (const row of firstRows) {\n        const value = row?.getValue(column.id)\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return sortingFns.datetime\n        }\n\n        if (typeof value === 'string') {\n          isString = true\n\n          if (value.split(reSplitAlphaNumeric).length > 1) {\n            return sortingFns.alphanumeric\n          }\n        }\n      }\n\n      if (isString) {\n        return sortingFns.text\n      }\n\n      return sortingFns.basic\n    }\n    column.getAutoSortDir = () => {\n      const firstRow = table.getFilteredRowModel().flatRows[0]\n\n      const value = firstRow?.getValue(column.id)\n\n      if (typeof value === 'string') {\n        return 'asc'\n      }\n\n      return 'desc'\n    }\n    column.getSortingFn = () => {\n      if (!column) {\n        throw new Error()\n      }\n\n      return isFunction(column.columnDef.sortingFn)\n        ? column.columnDef.sortingFn\n        : column.columnDef.sortingFn === 'auto'\n        ? column.getAutoSortingFn()\n        : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n          sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n    }\n    column.toggleSorting = (desc, multi) => {\n      // if (column.columns.length) {\n      //   column.columns.forEach((c, i) => {\n      //     if (c.id) {\n      //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n      //     }\n      //   })\n      //   return\n      // }\n\n      // this needs to be outside of table.setSorting to be in sync with rerender\n      const nextSortingOrder = column.getNextSortingOrder()\n      const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n      table.setSorting(old => {\n        // Find any existing sorting for this column\n        const existingSorting = old?.find(d => d.id === column.id)\n        const existingIndex = old?.findIndex(d => d.id === column.id)\n\n        let newSorting: SortingState = []\n\n        // What should we do with this sort action?\n        let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n        let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n        // Multi-mode\n        if (old?.length && column.getCanMultiSort() && multi) {\n          if (existingSorting) {\n            sortAction = 'toggle'\n          } else {\n            sortAction = 'add'\n          }\n        } else {\n          // Normal mode\n          if (old?.length && existingIndex !== old.length - 1) {\n            sortAction = 'replace'\n          } else if (existingSorting) {\n            sortAction = 'toggle'\n          } else {\n            sortAction = 'replace'\n          }\n        }\n\n        // Handle toggle states that will remove the sorting\n        if (sortAction === 'toggle') {\n          // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n          if (!hasManualValue) {\n            // Is our intention to remove?\n            if (!nextSortingOrder) {\n              sortAction = 'remove'\n            }\n          }\n        }\n\n        if (sortAction === 'add') {\n          newSorting = [\n            ...old,\n            {\n              id: column.id,\n              desc: nextDesc,\n            },\n          ]\n          // Take latest n columns\n          newSorting.splice(\n            0,\n            newSorting.length -\n              (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n          )\n        } else if (sortAction === 'toggle') {\n          // This flips (or sets) the\n          newSorting = old.map(d => {\n            if (d.id === column.id) {\n              return {\n                ...d,\n                desc: nextDesc,\n              }\n            }\n            return d\n          })\n        } else if (sortAction === 'remove') {\n          newSorting = old.filter(d => d.id !== column.id)\n        } else {\n          newSorting = [\n            {\n              id: column.id,\n              desc: nextDesc,\n            },\n          ]\n        }\n\n        return newSorting\n      })\n    }\n\n    column.getFirstSortDir = () => {\n      const sortDescFirst =\n        column.columnDef.sortDescFirst ??\n        table.options.sortDescFirst ??\n        column.getAutoSortDir() === 'desc'\n      return sortDescFirst ? 'desc' : 'asc'\n    }\n\n    column.getNextSortingOrder = (multi?: boolean) => {\n      const firstSortDirection = column.getFirstSortDir()\n      const isSorted = column.getIsSorted()\n\n      if (!isSorted) {\n        return firstSortDirection\n      }\n\n      if (\n        isSorted !== firstSortDirection &&\n        (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n        (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n      ) {\n        return false\n      }\n      return isSorted === 'desc' ? 'asc' : 'desc'\n    }\n\n    column.getCanSort = () => {\n      return (\n        (column.columnDef.enableSorting ?? true) &&\n        (table.options.enableSorting ?? true) &&\n        !!column.accessorFn\n      )\n    }\n\n    column.getCanMultiSort = () => {\n      return (\n        column.columnDef.enableMultiSort ??\n        table.options.enableMultiSort ??\n        !!column.accessorFn\n      )\n    }\n\n    column.getIsSorted = () => {\n      const columnSort = table.getState().sorting?.find(d => d.id === column.id)\n\n      return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n    }\n\n    column.getSortIndex = () =>\n      table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1\n\n    column.clearSorting = () => {\n      //clear sorting for just 1 column\n      table.setSorting(old =>\n        old?.length ? old.filter(d => d.id !== column.id) : []\n      )\n    }\n\n    column.getToggleSortingHandler = () => {\n      const canSort = column.getCanSort()\n\n      return (e: unknown) => {\n        if (!canSort) return\n        ;(e as any).persist?.()\n        column.toggleSorting?.(\n          undefined,\n          column.getCanMultiSort() ? table.options.isMultiSortEvent?.(e) : false\n        )\n      }\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setSorting = updater => table.options.onSortingChange?.(updater)\n    table.resetSorting = defaultState => {\n      table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n    }\n    table.getPreSortedRowModel = () => table.getGroupedRowModel()\n    table.getSortedRowModel = () => {\n      if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n        table._getSortedRowModel = table.options.getSortedRowModel(table)\n      }\n\n      if (table.options.manualSorting || !table._getSortedRowModel) {\n        return table.getPreSortedRowModel()\n      }\n\n      return table._getSortedRowModel()\n    }\n  },\n}\n", "import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.toggleVisibility = value => {\n      if (column.getCanHide()) {\n        table.setColumnVisibility(old => ({\n          ...old,\n          [column.id]: value ?? !column.getIsVisible(),\n        }))\n      }\n    }\n    column.getIsVisible = () => {\n      return table.getState().columnVisibility?.[column.id] ?? true\n    }\n\n    column.getCanHide = () => {\n      return (\n        (column.columnDef.enableHiding ?? true) &&\n        (table.options.enableHiding ?? true)\n      )\n    }\n    column.getToggleVisibilityHandler = () => {\n      return (e: unknown) => {\n        column.toggleVisibility?.(\n          ((e as MouseEvent).target as HTMLInputElement).checked\n        )\n      }\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row._getAllVisibleCells = memo(\n      () => [row.getAllCells(), table.getState().columnVisibility],\n      cells => {\n        return cells.filter(cell => cell.column.getIsVisible())\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    )\n    row.getVisibleCells = memo(\n      () => [\n        row.getLeftVisibleCells(),\n        row.getCenterVisibleCells(),\n        row.getRightVisibleCells(),\n      ],\n      (left, center, right) => [...left, ...center, ...right],\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    )\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    table.getVisibleFlatColumns = makeVisibleColumnsMethod(\n      'getVisibleFlatColumns',\n      () => table.getAllFlatColumns()\n    )\n    table.getVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getVisibleLeafColumns',\n      () => table.getAllLeafColumns()\n    )\n    table.getLeftVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getLeftVisibleLeafColumns',\n      () => table.getLeftLeafColumns()\n    )\n    table.getRightVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getRightVisibleLeafColumns',\n      () => table.getRightLeafColumns()\n    )\n    table.getCenterVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getCenterVisibleLeafColumns',\n      () => table.getCenterLeafColumns()\n    )\n\n    table.setColumnVisibility = updater =>\n      table.options.onColumnVisibilityChange?.(updater)\n\n    table.resetColumnVisibility = defaultState => {\n      table.setColumnVisibility(\n        defaultState ? {} : table.initialState.columnVisibility ?? {}\n      )\n    }\n\n    table.toggleAllColumnsVisible = value => {\n      value = value ?? !table.getIsAllColumnsVisible()\n\n      table.setColumnVisibility(\n        table.getAllLeafColumns().reduce(\n          (obj, column) => ({\n            ...obj,\n            [column.id]: !value ? !column.getCanHide?.() : value,\n          }),\n          {}\n        )\n      )\n    }\n\n    table.getIsAllColumnsVisible = () =>\n      !table.getAllLeafColumns().some(column => !column.getIsVisible?.())\n\n    table.getIsSomeColumnsVisible = () =>\n      table.getAllLeafColumns().some(column => column.getIsVisible?.())\n\n    table.getToggleAllColumnsVisibilityHandler = () => {\n      return (e: unknown) => {\n        table.toggleAllColumnsVisible(\n          ((e as MouseEvent).target as HTMLInputElement)?.checked\n        )\n      }\n    }\n  },\n}\n", "import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string, searchAll?: boolean) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string, searchAll?: boolean) => {\n      const row = (searchAll ? table.getCoreRowModel() : table.getRowModel())\n        .rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce(\n          (acc, column) => {\n            acc[column.id] = column\n            return acc\n          },\n          {} as Record<string, Column<TData, unknown>>\n        )\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  for (let index = 0; index < table._features.length; index++) {\n    const feature = table._features[index]\n    feature?.createTable?.(table)\n  }\n\n  return table\n}\n", "import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    feature.createCell?.(\n      cell as Cell<TData, TValue>,\n      column,\n      row as Row<TData>,\n      table\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n", "import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  parentId?: string\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n  getParentRow: () => Row<TData> | undefined\n  getParentRows: () => Row<TData>[]\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[],\n  parentId?: string\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => (row.parentId ? table.getRow(row.parentId) : undefined),\n    getParentRows: () => {\n      let parentRows: Row<TData>[] = []\n      let currentRow = row\n      while (true) {\n        const parentRow = currentRow.getParentRow()\n        if (!parentRow) break\n        parentRows.push(parentRow)\n        currentRow = parentRow\n      }\n      return parentRows.reverse()\n    },\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    feature?.createRow?.(row, table)\n  }\n\n  return row as Row<TData>\n}\n", "import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n", "import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parentRow?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parentRow),\n              originalRows[i]!,\n              i,\n              depth,\n              undefined,\n              parentRow?.id\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n", "import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        undefined,\n        row.parentId\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredFlatRows.push(row)\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredFlatRows.push(row)\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredFlatRows.push(row)\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows: Row<TData>[] = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth,\n            undefined,\n            row.parentId\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n", "import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            return\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n", "import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n", "import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return new Map()\n\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n", "import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return undefined\n\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n", "import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if (!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              let sortInt = 0\n\n              // All sorting ints should always return in ascending order\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = aValue === undefined\n                const bUndefined = bValue === undefined\n\n                if (aUndefined || bUndefined) {\n                  sortInt =\n                    aUndefined && bUndefined\n                      ? 0\n                      : aUndefined\n                      ? columnInfo.sortUndefined\n                      : -columnInfo.sortUndefined\n                }\n              }\n\n              if (sortInt === 0) {\n                sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n              }\n\n              // If sorting is non-zero, take care of desc and inversion\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n", "import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id)\n              }\n\n              return row\n            })\n          }\n\n          const columnId: string = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth,\n                undefined,\n                parentId\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column?.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0)\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n", "import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n", "import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n", "import * as React from 'react'\nexport * from '@tanstack/table-core'\n\nimport {\n  TableOptions,\n  TableOptionsResolved,\n  RowData,\n  createTable,\n} from '@tanstack/table-core'\n\nexport type Renderable<TProps> = React.ReactNode | React.ComponentType<TProps>\n\n//\n\nexport function flexRender<TProps extends object>(\n  Comp: Renderable<TProps>,\n  props: TProps\n): React.ReactNode | JSX.Element {\n  return !Comp ? null : isReactComponent<TProps>(Comp) ? (\n    <Comp {...props} />\n  ) : (\n    Comp\n  )\n}\n\nfunction isReactComponent<TProps>(\n  component: unknown\n): component is React.ComponentType<TProps> {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component: any) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component: any) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\nexport function useReactTable<TData extends RowData>(\n  options: TableOptions<TData>\n) {\n  // Compose in the generic options to the user options\n  const resolvedOptions: TableOptionsResolved<TData> = {\n    state: {}, // Dummy state\n    onStateChange: () => {}, // noop\n    renderFallbackValue: null,\n    ...options,\n  }\n\n  // Create a new table and store it in state\n  const [tableRef] = React.useState(() => ({\n    current: createTable<TData>(resolvedOptions),\n  }))\n\n  // By default, manage table state here using the table's initial state\n  const [state, setState] = React.useState(() => tableRef.current.initialState)\n\n  // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n  tableRef.current.setOptions(prev => ({\n    ...prev,\n    ...options,\n    state: {\n      ...state,\n      ...options.state,\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      setState(updater)\n      options.onStateChange?.(updater)\n    },\n  }))\n\n  return tableRef.current\n}\n"],
  "mappings": "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",
  "names": ["functionalUpdate", "updater", "input", "noop", "makeStateUpdater", "key", "instance", "setState", "old", "isFunction", "d", "Function", "isNumberArray", "Array", "isArray", "every", "val", "flattenBy", "arr", "getChildren", "flat", "recurse", "subArr", "forEach", "item", "push", "children", "length", "memo", "getDeps", "fn", "opts", "deps", "result", "depTime", "debug", "Date", "now", "newDeps", "depsChanged", "some", "dep", "index", "resultTime", "onChange", "depEndTime", "Math", "round", "resultEndTime", "resultFpsPercentage", "pad", "str", "num", "String", "console", "info", "max", "min", "createColumn", "table", "columnDef", "depth", "parent", "_ref", "_resolvedColumnDef$id", "defaultColumn", "_getDefaultColumnDef", "resolvedColumnDef", "accessorKey", "id", "replace", "undefined", "header", "accessorFn", "includes", "originalRow", "split", "_result", "warn", "process", "Error", "column", "columns", "getFlatColumns", "_column$columns", "flatMap", "_table$options$debugA", "options", "debugAll", "debugColumns", "getLeafColumns", "_getOrderColumnsFn", "orderColumns", "_column$columns2", "leafColumns", "_table$options$debugA2", "feature", "_features", "createHeader", "_options$id", "isPlaceholder", "placeholderId", "subHeaders", "colSpan", "rowSpan", "headerGroup", "getLeafHeaders", "leafHeaders", "recurseHeader", "h", "map", "getContext", "Headers", "createTable", "getHeaderGroups", "getAllColumns", "getVisibleLeafColumns", "getState", "columnPinning", "left", "right", "allColumns", "_left$map$filter", "_right$map$filter", "leftColumns", "columnId", "find", "filter", "Boolean", "rightColumns", "centerColumns", "headerGroups", "buildHeaderGroups", "debugHeaders", "getCenterHeaderGroups", "getLeftHeaderGroups", "_left$map$filter2", "orderedLeafColumns", "_table$options$debugA3", "getRightHeaderGroups", "_right$map$filter2", "_table$options$debugA4", "getFooterGroups", "reverse", "_table$options$debugA5", "getLeftFooterGroups", "_table$options$debugA6", "getCenterFooterGroups", "_table$options$debugA7", "getRightFooterGroups", "_table$options$debugA8", "getFlatHeaders", "headers", "_table$options$debugA9", "getLeftFlatHeaders", "_table$options$debugA10", "getCenterFlatHeaders", "_table$options$debugA11", "getRightFlatHeaders", "_table$options$debugA12", "getCenterLeafHeaders", "flatHeaders", "_header$subHeaders", "_table$options$debugA13", "getLeftLeafHeaders", "_header$subHeaders2", "_table$options$debugA14", "getRightLeafHeaders", "_header$subHeaders3", "_table$options$debugA15", "center", "_left$0$headers", "_left$", "_center$0$headers", "_center$", "_right$0$headers", "_right$", "_table$options$debugA16", "columnsToGroup", "headerFamily", "_headerGroups$0$heade", "_headerGroups$", "maxDepth", "findMaxDepth", "getIsVisible", "createHeaderGroup", "headersToGroup", "join", "pendingParentHeaders", "headerToGroup", "latestPendingParentHeader", "isLeafHeader", "bottomHeaders", "recurseHeadersForSpans", "filteredHeaders", "childRowSpans", "childColSpan", "childRowSpan", "minChildRowSpan", "defaultColumnSizing", "size", "minSize", "maxSize", "Number", "MAX_SAFE_INTEGER", "getDefaultColumnSizingInfoState", "startOffset", "startSize", "deltaOffset", "deltaPercentage", "isResizingColumn", "columnSizingStart", "ColumnSizing", "getDefaultColumnDef", "getInitialState", "state", "columnSizing", "columnSizingInfo", "getDefaultOptions", "columnResizeMode", "onColumnSizingChange", "onColumnSizingInfoChange", "getSize", "_column$columnDef$min", "_column$columnDef$max", "columnSize", "getStart", "position", "getLeftVisibleLeafColumns", "getRightVisibleLeafColumns", "findIndex", "prevSiblingColumn", "resetSize", "setColumnSizing", "_ref2", "_", "rest", "getCanResize", "_column$columnDef$ena", "_table$options$enable", "enableResizing", "enableColumnResizing", "getIsResizing", "sum", "_header$column$getSiz", "prevSiblingHeader", "getResizeHandler", "getColumn", "canResize", "e", "persist", "isTouchStartEvent", "touches", "clientX", "newColumnSizing", "updateOffset", "eventType", "clientXPos", "setColumnSizingInfo", "_old$startOffset", "_old$startSize", "_ref3", "headerSize", "onMove", "onEnd", "mouseEvents", "moveHandler", "upHandler", "document", "removeEventListener", "touchEvents", "cancelable", "preventDefault", "stopPropagation", "_e$touches$", "passiveIfSupported", "passiveEventSupported", "passive", "addEventListener", "resetColumnSizing", "defaultState", "_table$initialState$c", "initialState", "resetHeaderSizeInfo", "_table$initialState$c2", "getTotalSize", "_table$getHeaderGroup", "_table$getHeaderGroup2", "reduce", "getLeftTotalSize", "_table$getLeftHeaderG", "_table$getLeftHeaderG2", "getCenterTotalSize", "_table$getCenterHeade", "_table$getCenterHeade2", "getRightTotalSize", "_table$getRightHeader", "_table$getRightHeader2", "passiveSupported", "supported", "window", "err", "type", "Expanding", "expanded", "onExpandedChange", "paginateExpandedRows", "registered", "queued", "_autoResetExpanded", "_table$options$autoRe", "_queue", "autoResetAll", "autoResetExpanded", "manualExpanding", "resetExpanded", "setExpanded", "toggleAllRowsExpanded", "getIsAllRowsExpanded", "_table$initialState$e", "_table$initialState", "getCanSomeRowsExpand", "getPrePaginationRowModel", "flatRows", "row", "getCanExpand", "getToggleAllRowsExpandedHandler", "getIsSomeRowsExpanded", "Object", "values", "keys", "getRowModel", "getIsExpanded", "getExpandedDepth", "rowIds", "rowsById", "splitId", "getPreExpandedRowModel", "getSortedRowModel", "getExpandedRowModel", "_getExpandedRowModel", "createRow", "toggleExpanded", "_expanded", "exists", "oldExpanded", "rowId", "_table$options$getIsR", "getIsRowExpanded", "_table$options$getRow", "_row$subRows", "getRowCanExpand", "enableExpanding", "subRows", "getIsAllParentsExpanded", "isFullyExpanded", "currentRow", "parentId", "getRow", "getToggleExpandedHandler", "canExpand", "includesString", "filterValue", "_row$getValue", "search", "toLowerCase", "getValue", "toString", "autoRemove", "testFalsey", "includesStringSensitive", "_row$getValue2", "equalsString", "_row$getValue3", "arrIncludes", "_row$getValue4", "arrIncludesAll", "_row$getValue5", "arrIncludesSome", "_row$getValue6", "equals", "weakEquals", "inNumberRange", "rowValue", "resolveFilterValue", "unsafeMin", "unsafeMax", "parsedMin", "parseFloat", "parsedMax", "isNaN", "Infinity", "temp", "filterFns", "Filters", "filterFn", "columnFilters", "globalFilter", "onColumnFiltersChange", "onGlobalFilterChange", "filterFromLeafRows", "maxLeafRowFilterDepth", "globalFilterFn", "getColumnCanGlobalFilter", "_table$getCoreRowMode", "value", "getCoreRowModel", "_getAllCellsByColumnId", "getAutoFilterFn", "firstRow", "getFilterFn", "_table$options$filter", "_table$options$filter2", "getCanFilter", "_table$options$enable2", "enableColumnFilter", "enableColumnFilters", "enableFilters", "getCanGlobalFilter", "_column$columnDef$ena2", "_table$options$enable3", "_table$options$enable4", "_table$options$getCol", "enableGlobalFilter", "getIsFiltered", "getFilterIndex", "getFilterValue", "_table$getState$colum", "_table$getState$colum2", "_table$getState$colum3", "setFilterValue", "setColumnFilters", "previousfilter", "newFilter", "shouldAutoRemoveFilter", "_old$filter", "newFilterObj", "_old$map", "_getFacetedRowModel", "getFacetedRowModel", "getPreFilteredRowModel", "_getFacetedUniqueValues", "getFacetedUniqueValues", "Map", "_getFacetedMinMaxValues", "getFacetedMinMaxValues", "columnFiltersMeta", "getGlobalAutoFilterFn", "getGlobalFilterFn", "_table$options$filter3", "_table$options$filter4", "getAllLeafColumns", "updateFn", "_functionalUpdate", "setGlobalFilter", "resetGlobalFilter", "resetColumnFilters", "getFilteredRowModel", "_getFilteredRowModel", "manualFiltering", "_getGlobalFacetedRowModel", "getGlobalFacetedRowModel", "_getGlobalFacetedUniqueValues", "getGlobalFacetedUniqueValues", "_getGlobalFacetedMinMaxValues", "getGlobalFacetedMinMaxValues", "_leafRows", "childRows", "next", "nextValue", "extent", "mean", "leafRows", "count", "median", "mid", "floor", "nums", "sort", "a", "b", "unique", "from", "Set", "uniqueCount", "_columnId", "aggregationFns", "Grouping", "aggregatedCell", "props", "_toString", "_props$getValue", "aggregationFn", "grouping", "onGroupingChange", "groupedColumnMode", "toggleGrouping", "setGrouping", "getCanGroup", "enableGrouping", "getIsGrouped", "_table$getState$group", "getGroupedIndex", "_table$getState$group2", "indexOf", "getToggleGroupingHandler", "canGroup", "getAutoAggregationFn", "prototype", "call", "getAggregationFn", "_table$options$aggreg", "_table$options$aggreg2", "resetGrouping", "_table$initialState$g", "getPreGroupedRowModel", "getGroupedRowModel", "_getGroupedRowModel", "manualGrouping", "groupingColumnId", "getGroupingValue", "_groupingValuesCache", "hasOwnProperty", "original", "createCell", "cell", "getIsPlaceholder", "getIsAggregated", "nonGroupingColumns", "col", "groupingColumns", "g", "Ordering", "columnOrder", "onColumnOrderChange", "setColumnOrder", "resetColumnOrder", "orderedColumns", "columnOrderCopy", "columnsCopy", "targetColumnId", "shift", "foundIndex", "splice", "defaultPageIndex", "defaultPageSize", "getDefaultPaginationState", "pageIndex", "pageSize", "Pagination", "pagination", "onPaginationChange", "_autoResetPageIndex", "autoResetPageIndex", "manualPagination", "resetPageIndex", "setPagination", "safeUpdater", "newState", "resetPagination", "_table$initialState$p", "setPageIndex", "maxPageIndex", "pageCount", "_table$initialState$p2", "resetPageSize", "_table$initialState$p3", "_table$initialState2", "setPageSize", "topRowIndex", "setPageCount", "_table$options$pageCo", "newPageCount", "getPageOptions", "getPageCount", "pageOptions", "fill", "i", "debugTable", "getCanPreviousPage", "getCanNextPage", "previousPage", "nextPage", "getPaginationRowModel", "_getPaginationRowModel", "_table$options$pageCo2", "ceil", "rows", "getDefaultColumnPinningState", "getDefaultRowPinningState", "top", "bottom", "Pinning", "rowPinning", "onColumnPinningChange", "onRowPinningChange", "pin", "columnIds", "setColumnPinning", "_old$left3", "_old$right3", "_old$left", "_old$right", "_old$left2", "_old$right2", "getCanPin", "_d$columnDef$enablePi", "enablePinning", "enableColumnPinning", "getIsPinned", "leafColumnIds", "isLeft", "isRight", "getPinnedIndex", "includeLeafRows", "includeParentRows", "leafRowIds", "getLeafRows", "parentRowIds", "getParentRows", "setRowPinning", "_old$top3", "_old$bottom3", "_old$top", "_old$bottom", "has", "_old$top2", "_old$bottom2", "_ref4", "enableRowPinning", "isTop", "isBottom", "_table$_getPinnedRows", "_visiblePinnedRowIds$", "visiblePinnedRowIds", "_getPinnedRows", "_ref5", "getCenterVisibleCells", "_getAllVisibleCells", "allCells", "leftAndRight", "debugRows", "getLeftVisibleCells", "cells", "getRightVisibleCells", "resetColumnPinning", "getIsSomeColumnsPinned", "_pinningState$positio", "pinningState", "_pinningState$left", "_pinningState$right", "getLeftLeafColumns", "getRightLeafColumns", "getCenterLeafColumns", "resetRowPinning", "_table$initialState$r", "getIsSomeRowsPinned", "_pinningState$positio2", "_pinningState$top", "_pinningState$bottom", "visibleRows", "pinnedRowIds", "_table$options$keepPi", "keepPinnedRows", "getTopRows", "getBottomRows", "getCenterRows", "allRows", "topAndBottom", "RowSelection", "rowSelection", "onRowSelectionChange", "enableRowSelection", "enableMultiRowSelection", "enableSubRowSelection", "setRowSelection", "resetRowSelection", "toggleAllRowsSelected", "getIsAllRowsSelected", "preGroupedFlatRows", "getCanSelect", "toggleAllPageRowsSelected", "resolvedValue", "getIsAllPageRowsSelected", "mutateRowIsSelected", "getPreSelectedRowModel", "getSelectedRowModel", "rowModel", "selectRowsFn", "getFilteredSelectedRowModel", "getGroupedSelectedRowModel", "isAllRowsSelected", "paginationFlatRows", "isAllPageRowsSelected", "getIsSomeRowsSelected", "_table$getState$rowSe", "totalSelected", "getIsSomePageRowsSelected", "getIsSelected", "getIsSomeSelected", "getToggleAllRowsSelectedHandler", "target", "checked", "getToggleAllPageRowsSelectedHandler", "toggleSelected", "isSelected", "selectedRowIds", "isRowSelected", "isSubRowSelected", "getIsAllSubRowsSelected", "getCanSelectSubRows", "getCanMultiSelect", "getToggleSelectedHandler", "canSelect", "_target", "newSelectedFlatRows", "newSelectedRowsById", "recurseRows", "_row$subRows2", "selection", "_selection$row$id", "_row$subRows3", "allChildrenSelected", "someSelected", "subRow", "subRowChildrenSelected", "reSplitAlphaNumeric", "alphanumeric", "rowA", "rowB", "compareAlphanumeric", "alphanumericCaseSensitive", "text", "compareBasic", "textCaseSensitive", "datetime", "basic", "aStr", "bStr", "aa", "bb", "an", "parseInt", "bn", "combo", "sortingFns", "Sorting", "sorting", "sortingFn", "sortUndefined", "onSortingChange", "isMultiSortEvent", "shiftKey", "getAutoSortingFn", "firstRows", "slice", "isString", "getAutoSortDir", "getSortingFn", "_table$options$sortin", "_table$options$sortin2", "toggleSorting", "desc", "multi", "nextSortingOrder", "getNextSortingOrder", "hasManualValue", "setSorting", "existingSorting", "existingIndex", "newSorting", "sortAction", "nextDesc", "getCanMultiSort", "_table$options$maxMul", "maxMultiSortColCount", "getFirstSortDir", "_column$columnDef$sor", "sortDescFirst", "firstSortDirection", "isSorted", "getIsSorted", "enableSortingRemoval", "enableMultiRemove", "getCanSort", "enableSorting", "enableMultiSort", "_table$getState$sorti", "columnSort", "getSortIndex", "_table$getState$sorti2", "_table$getState$sorti3", "clearSorting", "getToggleSortingHandler", "canSort", "resetSorting", "_table$initialState$s", "getPreSortedRowModel", "_getSortedRowModel", "manualSorting", "Visibility", "columnVisibility", "onColumnVisibilityChange", "toggleVisibility", "getCanHide", "setColumnVisibility", "enableHiding", "getToggleVisibilityHandler", "getAllCells", "getVisibleCells", "makeVisibleColumnsMethod", "getColumns", "getVisibleFlatColumns", "getAllFlatColumns", "getCenterVisibleLeafColumns", "resetColumnVisibility", "toggleAllColumnsVisible", "_value", "getIsAllColumnsVisible", "obj", "getIsSomeColumnsVisible", "getToggleAllColumnsVisibilityHandler", "features", "_options$initialState", "defaultOptions", "assign", "mergeOptions", "coreInitialState", "_feature$getInitialSt", "queuedTimeout", "coreInstance", "cb", "Promise", "resolve", "then", "catch", "error", "setTimeout", "reset", "setOptions", "newOptions", "onStateChange", "_getRowId", "getRowId", "_getCoreRowModel", "searchAll", "_defaultColumn", "_props$renderValue$to", "_props$renderValue", "renderValue", "_getColumnDefs", "columnDefs", "recurseColumns", "groupingColumnDef", "_getAllFlatColumnsById", "flatColumns", "acc", "getRenderValue", "_cell$getValue", "renderFallbackValue", "rowIndex", "_valuesCache", "_uniqueValuesCache", "getUniqueValues", "getParentRow", "parentRows", "parentRow", "createColumnHelper", "accessor", "display", "group", "data", "accessRows", "originalRows", "getSubRows", "_row$originalSubRows", "originalSubRows", "filterRows", "filterRowImpl", "filterRowModelFromLeafs", "filterRowModelFromRoot", "rowsToFilter", "filterRow", "_table$options$maxLea", "newFilteredFlatRows", "newFilteredRowsById", "recurseFilterRows", "newRow", "_table$options$maxLea2", "pass", "resolvedColumnFilters", "resolvedGlobalFilters", "_filterFn$resolveFilt", "filterableIds", "globallyFilterableColumns", "_globalFilterFn$resol", "currentColumnFilter", "currentGlobalFilter", "j", "filterMeta", "__global__", "filterRowsImpl", "preRowModel", "_table$getColumn", "facetedRowModel", "facetedUniqueValues", "_facetedUniqueValues$", "set", "get", "_facetedRowModel$flat", "firstValue", "facetedMinMaxValues", "sortingState", "sortedFlatRows", "availableSorting", "columnInfoById", "sortEntry", "invertSorting", "sortData", "sortedData", "_sortEntry$desc", "columnInfo", "isDesc", "sortInt", "aValue", "bValue", "aUndefined", "bUndefined", "existingGrouping", "groupedFlatRows", "groupedRowsById", "groupUpRecursively", "rowGroupsMap", "groupBy", "aggregatedGroupedRows", "entries", "groupingValue", "groupedRows", "_groupedRows$0$getVal", "aggregateFn", "groupMap", "resKey", "previous", "expandRows", "expandedRows", "handleRow", "pageStart", "pageEnd", "paginatedRowModel", "flexRender", "Comp", "props", "isReactComponent", "createElement", "component", "isClassComponent", "isExoticComponent", "proto", "Object", "getPrototypeOf", "prototype", "$$typeof", "includes", "description", "useReactTable", "options", "resolvedOptions", "state", "onStateChange", "renderFallbackValue", "tableRef", "useState", "current", "createTable", "setState", "initialState", "setOptions", "prev", "updater"]
}
