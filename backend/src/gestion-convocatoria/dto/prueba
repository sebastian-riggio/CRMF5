- Etapa negociación resolución:
    - campos:
        - Fecha resolución provisional
        - Fecha límite entrega reformulación
        - Fecha real entrega reformulación
        - Fecha límite para responder requerimiento
        - Fecha real respuesta requerimiento
        - Notas seguimiento:
        - adjuntar resolución provisional:



        async create(createConvocatoriaRegistroDto: CreateConvocatoriaRegistroDto) {
    const createdFinanciadores = await this.FinanciadoresModel.findOne({'nombre-entidad':createConvocatoriaRegistroDto['dirigido-entidades']}).exec()
  if(!createdFinanciadores){
    throw new BadRequestException(`No hay registro de financiadores: ${createConvocatoriaRegistroDto['dirigido-entidades']} `)
  }
const newConvocatoria = new this.ConvocatoriaModel({
  "entidad-convocante":createConvocatoriaRegistroDto['entidad-convocante'],
  "departamento-convocante":createConvocatoriaRegistroDto['departamento-convocante'],
  titulo:createConvocatoriaRegistroDto.titulo,
  "publicacion-oficial":createConvocatoriaRegistroDto['publicacion-oficial'],
  "convocatoria-enlace":createConvocatoriaRegistroDto['convocatoria-enlace'],
  tematica:createConvocatoriaRegistroDto.tematica,
  "trabajo-lineas":createConvocatoriaRegistroDto['trabajo-lineas'],
  "dirigido-entidades":createConvocatoriaRegistroDto['dirigido-entidades'],
  "fecha-apertura":createConvocatoriaRegistroDto['fecha-apertura'],
  "fecha-cierre":createConvocatoriaRegistroDto['fecha-cierre'],
  "fecha-resolucion":createConvocatoriaRegistroDto['fecha-resolucion'],
  "periodo-ejecucion":createConvocatoriaRegistroDto['periodo-ejecucion'],
  "fecha-justificacion":createConvocatoriaRegistroDto['fecha-justificacion'],
  auditoria:createConvocatoriaRegistroDto.auditoria,
  presupuesto:createConvocatoriaRegistroDto.presupuesto,
  "otra-informacion":createConvocatoriaRegistroDto['otra-informacion'],
  documentacion:createConvocatoriaRegistroDto.documentacion


});
return newConvocatoria.save()

  }